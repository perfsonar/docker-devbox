#
# Common Functions
#

WHOAMI=$(basename $0)
WHEREAMI=$(dirname $0)

warn()
{
    [ "$@" ] && echo "$@" 1>&2
}

die()
{
    warn "$@"
    exit 1
}

self_help()
{
    sed -e '1,/^#BEGIN-HELP/d ; /^#END-HELP/,$d ; s/^#\s\{0,1\}//' "$0"
    exit ${1:-0}
}
	

[ -d "${DDB}" ] || die "Can't find DDB directory."

DDB_ETC="${DDB}/../etc"

# Since these get run as root, the names need to be unique by user.
DDB_CONTAINER_PREFIX="ddb__$(id -un)__"

# Directory in the container where DDB's files live
DDB_DIR="/.ddb"

export DDB_COMMANDS="${DDB}/commands"


TMPBASE=$(mktemp -d)

# Run docker without root if:
#  - The user is root
#  - The user is on macOS (TODO: This may not be necessary)
#  - The user is in the docker group
#  - DDB_FORCE_ROOT isn't set

if [ "$(id -u)" -eq 0 \
		-o "$(uname -s)" = 'Darwin' \
		-o "$(id -Gn | tr ' ' '\n' | fgrep -x docker | wc -l)" -eq 1 \
		-a -z "${DDB_FORCE_ROOT}" \
   ]
then
    DOCKER=docker
else
    DOCKER='sudo docker'
fi

    
# Strip comments and blanks out of key/value file $1 and find the
# value out of columns 2+.
get_by_key()
{
    VALUE=$(sed -e 's/^\s*#.*$//g; /^$/d' "$1" \
		| awk -v "KEY=$2" '$1 == KEY { for(i=2; i<=NF; i++) { printf("%s",( (i>2) ? OFS : "" ) $i) } ; }')
    
    if [ -z "${VALUE}" ]
    then
	echo "$2: Not found in $1" 1>&2
	exit 1
    fi

    echo "${VALUE}"
}


# Get a password entry by name in a portable way
# Args:
#  1 - User name
getent_passwd()
{
    case "$(uname -s)" in

        Darwin)
            dscacheutil -q user -a name "$1" \
                | sed -e 's/^[^ ]*: //' \
                | tr '\n' ':' \
                | awk -F ':' '{ print $1":"$2":"$3":"$4":"$7":"$5":"$6 }'
            ;;

        *)
            getent passwd "$1"
            ;;

    esac
}


#
# CLEANUP ON EXIT
#

ddb_cleanup()
{
    rm -rf "${TMPBASE}"
}
trap ddb_cleanup EXIT
